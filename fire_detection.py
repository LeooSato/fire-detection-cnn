# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vgT0qegF_46yC14RCts_lRQa1rTP_r7h
"""

import cv2
import numpy as np
from tensorflow.keras.models import load_model

# Carregar a imagem usando OpenCV
img = cv2.imread('7df563a0-gp1symn9_cprght_reduced-1024x684.jpeg')

# Verificar se a imagem foi carregada corretamente
if img is None:
    print("Erro: Imagem não encontrada.")
else:
    # Aplicar a máscara na imagem
    mask = np.zeros(img.shape[:2], dtype="uint8")
    cv2.circle(mask, (150, 150), 100, 255, -1)
    masked_img = cv2.bitwise_and(img, img, mask=mask)

    # Aplicar suavização com blur para reduzir o ruído
    blurred_img = cv2.GaussianBlur(masked_img, (5, 5), 0)

    # Redimensionar a imagem para o tamanho que a CNN espera (28x28)
    resized_img = cv2.resize(blurred_img, (28, 28))

    # Converter a imagem para tons de cinza (se o modelo espera uma entrada com 1 canal)
    gray_img = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)

    # Expandir as dimensões para que fique no formato (1, 28, 28, 1) que o modelo espera
    input_img = np.expand_dims(gray_img, axis=[0, -1])  # 1 imagem, 28x28 pixels, 1 canal (tons de cinza)

    # Normalizar os valores dos pixels para a escala [0, 1]
    input_img = input_img / 255.0

    # Carregar o modelo treinado de CNN
    try:
        model = load_model('best-cnn-model.h5')

        # Opcional: recompilar o modelo se houver problemas de otimização ao carregar
        model.compile(optimizer='adam', loss='categorical_crossentropy')  # Ajuste isso conforme necessário

        # Mostrar a estrutura do modelo para verificar o formato da entrada esperada
        model.summary()

        # Fazer a predição usando a imagem processada
        prediction = model.predict(input_img)

        # Como o modelo tem 10 saídas (para 10 classes), precisamos verificar qual classe foi prevista
        predicted_class = np.argmax(prediction, axis=1)  # Retorna a classe com o maior valor de probabilidade

        # Exemplo de ação baseada na classe prevista (ajuste conforme sua tarefa)
        if predicted_class == 1:
            print("Queimada detectada")
        else:
            print("Sem queimada")

    except Exception as e:
        print(f"Erro ao carregar o modelo: {e}")

